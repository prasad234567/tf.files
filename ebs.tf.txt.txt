provider "aws" {
  region = "us-west-2"  # Change to your preferred region
}

# Create a VPC
resource "aws_vpc" "example" {
  cidr_block = "10.0.0.0/16"  # CIDR block for the VPC
}

# Create a Subnet
resource "aws_subnet" "example" {
  vpc_id            = aws_vpc.example.id
  cidr_block        = "10.0.1.0/24"  # CIDR block for the subnet
  availability_zone = "us-west-2a"   # Specify the AZ
}

# Create a Security Group
resource "aws_security_group" "example" {
  vpc_id = aws_vpc.example.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks  = ["0.0.0.0/0"]  # Change for more restrictive access
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks  = ["0.0.0.0/0"]
  }
}

# Create an EC2 Instance
resource "aws_instance" "example" {
  ami           = "ami-0123456789abcdef0"  # Replace with a valid AMI ID
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.example.id
  security_groups = [aws_security_group.example.name]

  tags = {
    Name = "example-instance"
  }
}

# Create an EBS Volume
resource "aws_ebs_volume" "example" {
  availability_zone = "us-west-2a"  # Must match the instance's AZ
  size             = 10               # Size in GiB
  type             = "gp2"            # General Purpose SSD

  tags = {
    Name = "example-ebs-volume"
  }
}

# Attach the EBS Volume to the EC2 Instance
resource "aws_volume_attachment" "example" {
  device_name = "/dev/sdh"  # The device name in the instance
  volume_id   = aws_ebs_volume.example.id
  instance_id = aws_instance.example.id
}

# Output the EBS Volume ID
output "ebs_volume_id" {
  value = aws_ebs_volume.example.id
}

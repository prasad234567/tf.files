provider "aws" {
  region = "us-west-2"  # Change to your preferred region
}

# Create an IAM Role for Lambda
resource "aws_iam_role" "lambda_role" {
  name = "lambda_example_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action    = "sts:AssumeRole"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
      Effect    = "Allow"
      Sid       = ""
    }]
  })
}

# Attach the AWS managed policy for logging
resource "aws_iam_role_policy_attachment" "lambda_logging" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.lambda_role.name
}

# Create a Lambda Function
resource "aws_lambda_function" "example" {
  function_name = "example_lambda_function"
  role          = aws_iam_role.lambda_role.arn
  handler       = "index.handler"  # Adjust according to your handler function
  runtime       = "nodejs14.x"      # Change to your preferred runtime

  # Assuming your code is in a zip file named "lambda_function.zip"
  filename      = "lambda_function.zip"
  source_code_hash = filebase64sha256("lambda_function.zip")

  environment = {
    VARIABLE_NAME = "value"  # Example of environment variable
  }
}

# Optionally, create an API Gateway to trigger the Lambda function
resource "aws_api_gateway_rest_api" "example" {
  name        = "example_api"
  description = "API for example Lambda function"
}

resource "aws_api_gateway_resource" "lambda_proxy" {
  rest_api_id = aws_api_gateway_rest_api.example.id
  parent_id   = aws_api_gateway_rest_api.example.root_resource_id
  path_part   = "example"
}

resource "aws_api_gateway_method" "lambda_proxy_method" {
  rest_api_id   = aws_api_gateway_rest_api.example.id
  resource_id   = aws_api_gateway_resource.lambda_proxy.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "lambda_proxy_integration" {
  rest_api_id = aws_api_gateway_rest_api.example.id
  resource_id = aws_api_gateway_resource.lambda_proxy.id
  http_method = aws_api_gateway_method.lambda_proxy_method.http_method

  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.example.invoke_arn
}

# Deployment for the API Gateway
resource "aws_api_gateway_deployment" "example" {
  rest_api_id = aws_api_gateway_rest_api.example.id
  stage_name  = "v1"

  depends_on = [aws_api_gateway_integration.lambda_proxy_integration]
}

output "lambda_function_name" {
  value = aws_lambda_function.example.function_name
}

output "api_endpoint" {
  value = "${aws_api_gateway_rest_api.example.invoke_url}/example"
}
